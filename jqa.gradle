project.ext["jqaversion"] = "1.3.0"
project.ext["jqapluginversion"] = "1.3"
project.ext["kejqapluginversion"] = "1.3.3"

configurations {
jqa
}

dependencies {
jqa("com.buschmais.jqassistant:jqassistant-commandline:${project.jqaversion}") {
// because jQA 1.3 comes with Neo4j 2 and 3 support, there would be a classpath conflict
exclude module: 'neo4j'
}

// list here all the plugins you want to use
jqa("com.buschmais.jqassistant.plugin:java:${project.jqapluginversion}")
jqa("com.buschmais.jqassistant.plugin:junit:${project.jqapluginversion}")
jqa("com.buschmais.jqassistant.plugin:graphml:${project.jqapluginversion}")

// and plugins from other contributors
jqa("de.kontext-e.jqassistant.plugin:jqassistant.plugin.git:${project.kejqapluginversion}")
}

task jqaclean(type: Delete) {
delete 'jqassistant/report'
delete 'jqassistant/store'
}

task(jqascan, dependsOn: 'jqaclean', type: JavaExec) {
main = 'com.buschmais.jqassistant.commandline.Main'
classpath = configurations.jqa

main = 'com.buschmais.jqassistant.commandline.Main'
args 'scan'
args '-f'

args 'java:classpath::build/classes/java/main'
args 'java:classpath::build/classes/java/test'

rootProject.subprojects {
args 'java:classpath::'+it.name+'/build/classes/java/main'
args 'java:classpath::'+it.name+'/build/classes/java/test'
}

args '.git'
}

task(jqaanalyze, type: JavaExec) {
classpath = configurations.jqa

main = 'com.buschmais.jqassistant.commandline.Main'
args 'analyze'
}

task(jqaavailablescopes, type: JavaExec) {
classpath = configurations.jqa

main = 'com.buschmais.jqassistant.commandline.Main'
args 'available-scopes'
}

task(jqareset, type: JavaExec) {
classpath = configurations.jqa

main = 'com.buschmais.jqassistant.commandline.Main'
args 'reset'
}

task(jqaeffectiverules, type: JavaExec) {
classpath = configurations.jqa

main = 'com.buschmais.jqassistant.commandline.Main'
args 'effective-rules'
}

task(jqaavailablerules, type: JavaExec) {
classpath = configurations.jqa

main = 'com.buschmais.jqassistant.commandline.Main'
args 'available-rules'
}

task(jqareport, type: JavaExec) {
classpath = configurations.jqa

main = 'com.buschmais.jqassistant.commandline.Main'
args 'report'
}

task(jqa, dependsOn: ['jqascan','jqaanalyze']) {
jqaanalyze.mustRunAfter jqascan
}

task(jqs, type: JavaExec) {
classpath = configurations.jqa

main = 'com.buschmais.jqassistant.commandline.Main'
args 'server'

standardInput = System.in
}

clean.dependsOn jqaclean
